'use client';

import React from 'react';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Area,
  AreaChart
} from 'recharts';
import { Calendar, Thermometer, Waves, Sun } from 'lucide-react';
import { formatCurrency, chartColors } from '@/lib/utils';

interface SeasonalTrendsProps {
  timeRange: string;
}

export default function SeasonalTrends({ timeRange }: SeasonalTrendsProps) {
  const [viewMode, setViewMode] = React.useState<'monthly' | 'seasonal' | 'weather'>('monthly');

  // Mock seasonal data
  const monthlyData = React.useMemo(() => [
    { month: 'Jan', revenue: 85000, orders: 120, temperature: 24, rainfall: 45 },
    { month: 'Feb', revenue: 92000, orders: 135, temperature: 26, rainfall: 38 },
    { month: 'Mar', revenue: 108000, orders: 158, temperature: 28, rainfall: 52 },
    { month: 'Apr', revenue: 125000, orders: 182, temperature: 30, rainfall: 75 },
    { month: 'May', revenue: 142000, orders: 205, temperature: 32, rainfall: 120 },
    { month: 'Jun', revenue: 158000, orders: 225, temperature: 33, rainfall: 180 },
    { month: 'Jul', revenue: 145000, orders: 210, temperature: 32, rainfall: 165 },
    { month: 'Aug', revenue: 138000, orders: 198, temperature: 31, rainfall: 155 },
    { month: 'Sep', revenue: 152000, orders: 220, temperature: 30, rainfall: 140 },
    { month: 'Oct', revenue: 165000, orders: 235, temperature: 28, rainfall: 95 },
    { month: 'Nov', revenue: 148000, orders: 215, temperature: 26, rainfall: 68 },
    { month: 'Dec', revenue: 135000, orders: 195, temperature: 24, rainfall: 55 },
  ], []);

  const seasonalData = React.useMemo(() => [
    { season: 'Q1 (Dry)', revenue: 285000, avgTemp: 26, avgRainfall: 45, demand: 'High' },
    { season: 'Q2 (Hot)', revenue: 425000, avgTemp: 32, avgRainfall: 125, demand: 'Peak' },
    { season: 'Q3 (Rainy)', revenue: 435000, avgTemp: 31, avgRainfall: 153, demand: 'Peak' },
    { season: 'Q4 (Cool)', revenue: 448000, avgTemp: 26, avgRainfall: 73, demand: 'High' },
  ], []);

  const weatherCorrelation = React.useMemo(() => 
    monthlyData.map(item => ({
      ...item,
      demandIndex: (item.orders / 120) * 100, // Normalized demand index
      optimalTemp: Math.abs(item.temperature - 30) < 2 ? 1 : 0, // Optimal temperature indicator
    }))
  , [monthlyData]);

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-4 border border-gray-200 rounded-lg shadow-lg">
          <p className="font-medium text-gray-900 mb-2">{label}</p>
          {payload.map((entry: any, index: number) => (
            <div key={index} className="flex items-center mb-1">
              <div 
                className="w-3 h-3 rounded-full mr-2"
                style={{ backgroundColor: entry.color }}
              />
              <span className="text-sm">
                {entry.name}: {
                  entry.name === 'Revenue' ? formatCurrency(entry.value) :
                  entry.name === 'Temperature' ? `${entry.value}°C` :
                  entry.name === 'Rainfall' ? `${entry.value}mm` :
                  entry.value
                }
              </span>
            </div>
          ))}
        </div>
      );
    }
    return null;
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-orange-100 rounded-lg">
            <Calendar className="h-5 w-5 text-orange-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">Seasonal Trends</h3>
            <p className="text-sm text-gray-500">Seasonal patterns and weather correlation</p>
          </div>
        </div>

        {/* View Mode Toggle */}
        <div className="flex space-x-1 bg-gray-100 rounded-lg p-1">
          {(['monthly', 'seasonal', 'weather'] as const).map((mode) => (
            <button
              key={mode}
              onClick={() => setViewMode(mode)}
              className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
                viewMode === mode
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              {mode === 'monthly' ? 'Monthly' : mode === 'seasonal' ? 'Seasonal' : 'Weather'}
            </button>
          ))}
        </div>
      </div>

      {/* Seasonal Insights */}
      <div className="grid grid-cols-4 gap-4 mb-6">
        <div className="bg-blue-50 rounded-lg p-3">
          <div className="flex items-center">
            <Waves className="h-4 w-4 text-blue-600 mr-2" />
            <div>
              <p className="text-xs text-blue-600 font-medium">Peak Season</p>
              <p className="text-sm font-bold text-blue-900">Q3-Q4</p>
            </div>
          </div>
        </div>

        <div className="bg-green-50 rounded-lg p-3">
          <div className="flex items-center">
            <Thermometer className="h-4 w-4 text-green-600 mr-2" />
            <div>
              <p className="text-xs text-green-600 font-medium">Optimal Temp</p>
              <p className="text-sm font-bold text-green-900">28-32°C</p>
            </div>
          </div>
        </div>

        <div className="bg-purple-50 rounded-lg p-3">
          <div className="flex items-center">
            <Sun className="h-4 w-4 text-purple-600 mr-2" />
            <div>
              <p className="text-xs text-purple-600 font-medium">Best Month</p>
              <p className="text-sm font-bold text-purple-900">October</p>
            </div>
          </div>
        </div>

        <div className="bg-orange-50 rounded-lg p-3">
          <div className="flex items-center">
            <Calendar className="h-4 w-4 text-orange-600 mr-2" />
            <div>
              <p className="text-xs text-orange-600 font-medium">Growth</p>
              <p className="text-sm font-bold text-orange-900">+24.5%</p>
            </div>
          </div>
        </div>
      </div>

      {/* Charts based on view mode */}
      <div className="h-80">
        <ResponsiveContainer width="100%" height="100%">
          {viewMode === 'monthly' && (
            <AreaChart data={monthlyData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              <defs>
                <linearGradient id="revenueGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={chartColors.primary} stopOpacity={0.3}/>
                  <stop offset="95%" stopColor={chartColors.primary} stopOpacity={0}/>
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
              <XAxis dataKey="month" stroke="#6b7280" fontSize={12} />
              <YAxis 
                yAxisId="revenue"
                stroke="#6b7280" 
                fontSize={12} 
                tickFormatter={(value) => formatCurrency(value).replace('.00', '')}
              />
              <YAxis 
                yAxisId="orders"
                orientation="right"
                stroke="#6b7280" 
                fontSize={12}
              />
              <Tooltip content={<CustomTooltip />} />
              <Legend />
              <Area
                yAxisId="revenue"
                type="monotone"
                dataKey="revenue"
                stroke={chartColors.primary}
                fill="url(#revenueGradient)"
                strokeWidth={2}
                name="Revenue"
              />
              <Line
                yAxisId="orders"
                type="monotone"
                dataKey="orders"
                stroke={chartColors.secondary}
                strokeWidth={2}
                dot={{ fill: chartColors.secondary, strokeWidth: 2, r: 4 }}
                name="Orders"
              />
            </AreaChart>
          )}

          {viewMode === 'seasonal' && (
            <AreaChart data={seasonalData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              <defs>
                <linearGradient id="seasonalGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={chartColors.tertiary} stopOpacity={0.3}/>
                  <stop offset="95%" stopColor={chartColors.tertiary} stopOpacity={0}/>
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
              <XAxis dataKey="season" stroke="#6b7280" fontSize={12} />
              <YAxis 
                stroke="#6b7280" 
                fontSize={12} 
                tickFormatter={(value) => formatCurrency(value).replace('.00', '')}
              />
              <Tooltip 
                content={({ active, payload, label }) => {
                  if (active && payload && payload.length) {
                    const data = payload[0].payload;
                    return (
                      <div className="bg-white p-4 border border-gray-200 rounded-lg shadow-lg">
                        <p className="font-medium text-gray-900 mb-2">{label}</p>
                        <p className="text-sm">Revenue: {formatCurrency(data.revenue)}</p>
                        <p className="text-sm">Avg Temperature: {data.avgTemp}°C</p>
                        <p className="text-sm">Avg Rainfall: {data.avgRainfall}mm</p>
                        <p className="text-sm">Demand: {data.demand}</p>
                      </div>
                    );
                  }
                  return null;
                }}
              />
              <Area
                type="monotone"
                dataKey="revenue"
                stroke={chartColors.tertiary}
                fill="url(#seasonalGradient)"
                strokeWidth={3}
                name="Seasonal Revenue"
              />
            </AreaChart>
          )}

          {viewMode === 'weather' && (
            <LineChart data={weatherCorrelation} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
              <XAxis dataKey="month" stroke="#6b7280" fontSize={12} />
              <YAxis 
                yAxisId="temp"
                domain={[20, 35]}
                stroke="#6b7280" 
                fontSize={12}
                tickFormatter={(value) => `${value}°C`}
              />
              <YAxis 
                yAxisId="demand"
                orientation="right"
                domain={[80, 200]}
                stroke="#6b7280" 
                fontSize={12}
              />
              <Tooltip content={<CustomTooltip />} />
              <Legend />
              <Line
                yAxisId="temp"
                type="monotone"
                dataKey="temperature"
                stroke="#F59E0B"
                strokeWidth={3}
                dot={{ fill: '#F59E0B', strokeWidth: 2, r: 4 }}
                name="Temperature"
              />
              <Line
                yAxisId="demand"
                type="monotone"
                dataKey="demandIndex"
                stroke="#3B82F6"
                strokeWidth={2}
                dot={{ fill: '#3B82F6', strokeWidth: 2, r: 4 }}
                name="Demand Index"
              />
              <Line
                yAxisId="temp"
                type="monotone"
                dataKey="rainfall"
                stroke="#10B981"
                strokeWidth={2}
                strokeDasharray="5 5"
                dot={{ fill: '#10B981', strokeWidth: 2, r: 3 }}
                name="Rainfall"
              />
            </LineChart>
          )}
        </ResponsiveContainer>
      </div>

      {/* Insights */}
      <div className="mt-6 p-4 bg-gray-50 rounded-lg">
        <h4 className="font-medium text-gray-900 mb-2">Key Insights</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
          <div>
            <p>• <strong>Peak demand</strong> occurs during rainy season (Q3) with optimal temperatures</p>
            <p>• <strong>Temperature range</strong> of 28-32°C shows highest correlation with sales</p>
          </div>
          <div>
            <p>• <strong>October</strong> consistently shows highest revenue across years</p>
            <p>• <strong>Weather patterns</strong> directly impact shrimp breeding cycles and demand</p>
          </div>
        </div>
      </div>
    </div>
  );
}
'use client';

import React from 'react';
import { useQuery } from '@tanstack/react-query';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
  BarChart,
  Bar
} from 'recharts';
import { DollarSign, TrendingUp, TrendingDown, Target } from 'lucide-react';
import { apiClient } from '@/lib/api';
import { queryKeys } from '@/lib/queryClient';
import { formatCurrency, formatDate, chartColors } from '@/lib/utils';

interface RevenueAnalyticsProps {
  timeRange: string;
  compareMode: boolean;
}

export default function RevenueAnalytics({ timeRange, compareMode }: RevenueAnalyticsProps) {
  const [chartType, setChartType] = React.useState<'line' | 'area' | 'bar'>('area');

  // Fetch revenue analytics data
  // const { data: revenueData, isLoading, error } = useQuery({
  //   queryKey: [...queryKeys.salesChart, { timeRange, type: 'revenue' }],
  //   queryFn: () => apiClient.getRevenueAnalytics({ timeRange, compare: compareMode }),
  // });
  const revenueData = null;
  const isLoading = false;
  const error = null;

  // Mock data for demonstration
  const mockData = React.useMemo(() => {
    const dates = [];
    const now = new Date();
    for (let i = 29; i >= 0; i--) {
      const date = new Date(now);
      date.setDate(date.getDate() - i);
      dates.push({
        date: date.toISOString().split('T')[0],
        revenue: Math.random() * 50000 + 20000,
        previousRevenue: compareMode ? Math.random() * 45000 + 18000 : undefined,
        orders: Math.floor(Math.random() * 50 + 20),
        previousOrders: compareMode ? Math.floor(Math.random() * 45 + 18) : undefined,
        avgOrderValue: Math.random() * 2000 + 1000,
      });
    }
    return dates;
  }, [compareMode]);

  const chartData = mockData;

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-4 border border-gray-200 rounded-lg shadow-lg">
          <p className="font-medium text-gray-900 mb-2">{formatDate(label)}</p>
          {payload.map((entry: any, index: number) => (
            <div key={index} className="flex items-center">
              <div 
                className="w-3 h-3 rounded-full mr-2"
                style={{ backgroundColor: entry.color }}
              />
              <span className="text-sm">
                {entry.name}: {formatCurrency(entry.value)}
              </span>
            </div>
          ))}
        </div>
      );
    }
    return null;
  };

  const totalRevenue = chartData.reduce((sum: number, item: any) => sum + item.revenue, 0);
  const avgRevenue = totalRevenue / chartData.length;
  const previousTotal = compareMode 
    ? chartData.reduce((sum: number, item: any) => sum + (item.previousRevenue || 0), 0)
    : 0;
  const growthRate = compareMode && previousTotal > 0 
    ? ((totalRevenue - previousTotal) / previousTotal) * 100 
    : 0;

  if (isLoading) {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="animate-pulse">
          <div className="h-6 bg-gray-200 rounded mb-4 w-1/3"></div>
          <div className="h-64 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-green-100 rounded-lg">
            <DollarSign className="h-5 w-5 text-green-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">Revenue Analytics</h3>
            <p className="text-sm text-gray-500">Track revenue trends and performance over time</p>
          </div>
        </div>

        {/* Chart Type Selector */}
        <div className="flex space-x-1 bg-gray-100 rounded-lg p-1">
          {(['line', 'area', 'bar'] as const).map((type) => (
            <button
              key={type}
              onClick={() => setChartType(type)}
              className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
                chartType === type
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </button>
          ))}
        </div>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-3 gap-4 mb-6">
        <div className="bg-gray-50 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Revenue</p>
              <p className="text-xl font-bold text-gray-900">
                {formatCurrency(totalRevenue)}
              </p>
            </div>
            <TrendingUp className="h-8 w-8 text-green-500" />
          </div>
        </div>

        <div className="bg-gray-50 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Daily Average</p>
              <p className="text-xl font-bold text-gray-900">
                {formatCurrency(avgRevenue)}
              </p>
            </div>
            <Target className="h-8 w-8 text-blue-500" />
          </div>
        </div>

        <div className="bg-gray-50 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">
                {compareMode ? 'Growth Rate' : 'Trend'}
              </p>
              <p className={`text-xl font-bold ${growthRate >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                {compareMode ? `${growthRate.toFixed(1)}%` : '+12.5%'}
              </p>
            </div>
            {growthRate >= 0 ? (
              <TrendingUp className="h-8 w-8 text-green-500" />
            ) : (
              <TrendingDown className="h-8 w-8 text-red-500" />
            )}
          </div>
        </div>
      </div>

      {/* Chart */}
      <div className="h-80">
        <ResponsiveContainer width="100%" height="100%">
          {chartType === 'area' && (
            <AreaChart data={chartData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              <defs>
                <linearGradient id="revenueGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={chartColors.primary} stopOpacity={0.3}/>
                  <stop offset="95%" stopColor={chartColors.primary} stopOpacity={0}/>
                </linearGradient>
                {compareMode && (
                  <linearGradient id="previousRevenueGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor={chartColors.secondary} stopOpacity={0.3}/>
                    <stop offset="95%" stopColor={chartColors.secondary} stopOpacity={0}/>
                  </linearGradient>
                )}
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
              <XAxis 
                dataKey="date" 
                stroke="#6b7280"
                fontSize={12}
                tickFormatter={(value) => new Date(value).getDate().toString()}
              />
              <YAxis 
                stroke="#6b7280"
                fontSize={12}
                tickFormatter={(value) => formatCurrency(value).replace('.00', '')}
              />
              <Tooltip content={<CustomTooltip />} />
              <Legend />
              <Area
                type="monotone"
                dataKey="revenue"
                stroke={chartColors.primary}
                fill="url(#revenueGradient)"
                strokeWidth={2}
                name="Current Revenue"
              />
              {compareMode && (
                <Area
                  type="monotone"
                  dataKey="previousRevenue"
                  stroke={chartColors.secondary}
                  fill="url(#previousRevenueGradient)"
                  strokeWidth={2}
                  strokeDasharray="5 5"
                  name="Previous Period"
                />
              )}
            </AreaChart>
          )}

          {chartType === 'line' && (
            <LineChart data={chartData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
              <XAxis 
                dataKey="date" 
                stroke="#6b7280"
                fontSize={12}
                tickFormatter={(value) => new Date(value).getDate().toString()}
              />
              <YAxis 
                stroke="#6b7280"
                fontSize={12}
                tickFormatter={(value) => formatCurrency(value).replace('.00', '')}
              />
              <Tooltip content={<CustomTooltip />} />
              <Legend />
              <Line
                type="monotone"
                dataKey="revenue"
                stroke={chartColors.primary}
                strokeWidth={3}
                dot={{ fill: chartColors.primary, strokeWidth: 2, r: 4 }}
                name="Current Revenue"
              />
              {compareMode && (
                <Line
                  type="monotone"
                  dataKey="previousRevenue"
                  stroke={chartColors.secondary}
                  strokeWidth={2}
                  strokeDasharray="5 5"
                  dot={{ fill: chartColors.secondary, strokeWidth: 2, r: 4 }}
                  name="Previous Period"
                />
              )}
            </LineChart>
          )}

          {chartType === 'bar' && (
            <BarChart data={chartData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
              <XAxis 
                dataKey="date" 
                stroke="#6b7280"
                fontSize={12}
                tickFormatter={(value) => new Date(value).getDate().toString()}
              />
              <YAxis 
                stroke="#6b7280"
                fontSize={12}
                tickFormatter={(value) => formatCurrency(value).replace('.00', '')}
              />
              <Tooltip content={<CustomTooltip />} />
              <Legend />
              <Bar 
                dataKey="revenue" 
                fill={chartColors.primary} 
                name="Current Revenue"
                radius={[2, 2, 0, 0]}
              />
              {compareMode && (
                <Bar 
                  dataKey="previousRevenue" 
                  fill={chartColors.secondary} 
                  name="Previous Period"
                  radius={[2, 2, 0, 0]}
                />
              )}
            </BarChart>
          )}
        </ResponsiveContainer>
      </div>
    </div>
  );
}
version: '3.8'

services:
  # PostgreSQL with PostGIS (Production)
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: broodstock-db-prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - broodstock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: broodstock-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${FRONTEND_URL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - broodstock-network
    restart: unless-stopped

  # Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: broodstock-frontend-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${API_URL}
    depends_on:
      - backend
    networks:
      - broodstock-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: broodstock-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - broodstock-network
    restart: unless-stopped

  # Redis for caching (Production)
  redis:
    image: redis:7-alpine
    container_name: broodstock-redis-prod
    volumes:
      - redis_data_prod:/data
    networks:
      - broodstock-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  broodstock-network:
    driver: bridge
version: '3.8'

services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: broodstock-db
    environment:
      POSTGRES_DB: broodstock_sales
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - broodstock-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d broodstock_sales"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: broodstock-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: broodstock_sales
      DB_USER: postgres
      DB_PASSWORD: password
      JWT_SECRET: development-secret-key
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - broodstock-network
    command: sh -c "npm run migrate:run && npm run dev"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: broodstock-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - broodstock-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: broodstock-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - broodstock-network
    command: redis-server --appendonly yes

  # MinIO for S3-compatible object storage (development)
  minio:
    image: minio/minio:latest
    container_name: broodstock-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - broodstock-network
    command: server /data --console-address ":9001"

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  broodstock-network:
    driver: bridge